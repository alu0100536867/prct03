18- puts sirve para mostrar por pantalla lo que pongamos entre comillas

21- "\t\n", con las comillas dobles interpreta lo que significan esos careacteres(tabulacion y retorno de carro)
    '\t\n', con las comillas simples no interpreta nada, pone literalmente \t\n.

22- %q, funciona como comillas simples, coje tal cual lo que esta entre llaves

23- %Q, funciona como comillas dobles osea interpola.

24- => "--4--\n--2--\n" 

25- =>  "he" 
    =>  "o"
    => "hello"
    
27- => "helloworld"

28- => "..."

29- => "2 2 2 " 

30- pone a cada elemento entre comillas

31- pone cada elemento entre comillas, poniendole una barra delante por que son los simbolos de tabulacion y salto de linea

32- pone cada elemento entre comillas, tal cual.

33- [nil, nil, nil]

34- [0, 0, 0]

35- [[1, 2], [3, 4]]

36- [0, 2, 4]

37- 
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> [“b”]
>> a[-2,2]
=>        ["d", "e"]
>> a[0..2]
=>  ["a", "b", "c"]    
>> a[0...1]
=>        ["a"]
>> a[-2..-1]
 =>        ["d", "e"]

38- 
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=>                ["A", "B", "c", "d", "e"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=>                ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=>                [1, 2, 3, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=>                [3, 3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=>                ["a", "b", "c", "d", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=>                ["a", "b", "c"]      

39- 
>> a = (1...4).to_a
=>            [1, 2, 3, 4]
>> a = a + [4, 5]
=>            [1, 2, 3, 4, 4, 5]
>> a += [[6, 7, 8]]
=>            [1, 2, 3, 4, 4, 5, [6, 7, 8]]
>> a = a + 9
TypeError: can't convert Fixnum into Array

40- 
>> a = []
=> []
>> a << 1
=>            [1]
>> a << 2 << 3
=>            [1, 2, 3]
>> a << [4, 5, 6]
=>            [1, 2, 3, [4, 5, 6]]
>> a.concat [7, 8]
=>            [1, 2, 3, [4, 5, 6], 7, 8]

41-
>> x = %w{a b c b a}
=>            ["a", "b", "c", "b", "a"]
>> x = x - %w{b c d}
=>            ["a", "a"]

42-
>> z = [0]*8
=>        [0, 0, 0, 0, 0, 0, 0, 0]

43-
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=>        [1, 2, 3, 4, 5]
>> d = b | a
=>        [5, 4, 3, 2, 1]
>> e = a & b
=>        [2, 3, 4]
>> f = b & a
=>        [4, 3, 2]

44-
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=>        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> b = 1...10
=> 1....10
>> b.to_a
=>        [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=>        false
>> b.include? 8
=>        true
>> b.step(2) {|x| print "#{x} " }
=>        1 3 5 7 9 => 1...10
>> 1..3.to_a

45-
>> r = 0...100
=> 0....100
>> r.member? 50
=>        true
>> r.include? 99.9
=>        true
>> r.member? 99.9
=>        true

46-
>> true.class
=>        TrueClass
>> false.class
=>        FalseClass        
>> puts "hello" if 0
hello
=> nil
>> puts "hello" if nil
=> nil
>> puts "hello" if ""

47-
>> x = :sym
=> :sym
>> x.class
=>Symbol
>> x == ’sym’
=>false
>> x == :sym
=>true
>> z = :’a long symbol’
=> :”a long symbol”
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

48-
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
Rub=> nil
>> t = "Java"
=> "Java"
>> print s, t
RubJava=> nil

49-
>> x = { :a => 1, :b => 2 }
=> {:a=>1, :b=>2}
>> x.keys
=>        [:a, :b]
>> x.values
=>        [1, 2]
>> x[:c] = 3
=> 3
>> x
=>         {:a=>1, :b=>2, :c=>3}
>> x.delete(’a’)
=> nil
>> x
=>        {:a=>1, :b=>2, :c=>3}
>> x.delete(:a)
=> 1
>> x
=>         {:b=>2, :c=>3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 } …........ k = key, v = value
=>    {:a=>1}
>> x
=>    {:a=>1}

50-









































































